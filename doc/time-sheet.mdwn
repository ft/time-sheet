# NAME

time-sheet - Framework for maintaining work time data

# SYNOPSIS

~~~~~~~ {.Scheme}
;; These are all modules the library provides. ‘script’
;; and ‘render’ are front-end modules for easily writing
;; multiple similar scripts based on the library.
(use-modules (time-sheet csv-import)
             (time-sheet calendar)
             (time-sheet holidays)
             (time-sheet vacation)
             (time-sheet inspect)
             (time-sheet merge)
             (time-sheet script)
             (time-sheet render)
             (time-sheet render latex)
             (time-sheet utils date)
             (time-sheet utils file))
;; ...
;; See the individual documentation for details about
;; the modules' API and features.
~~~~~~~


# DESCRIPTION

The *time-sheet* library offers ways to generate week by week time tables
from a database of files containing S-Expressions of daily time keeping
date for tasks, projects, issues and the like.

The S-Expressions may be produced in any way imaginable, as long as the
required set of key/value pairs are filled in (see *DATA SETS* below). The
library does provide an importer for CSV files as produced by the time
sheet export feature of the Redmine project tracker.


# DATA SETS

A data set for the library to use is an association list that describes
the time spent on a given task. The required information provided here is:

- `id`: which has to be a unique integer across the database identifying
  the data set
- `date`: which specifies the day the time was spent
- `hours`: which is a number specifying the amount of time spent in the
  data set in hours.

Additionally, the following data is considered by at least one of the
renderers or one of the utility functions:

- `person`: The name of the person who performed the task.
- `project`: The name of the project the task was part of.
- `ticket-id`: A ticket number associated the the time spent.
- `ticket-subject`: The subject line associated with `ticket-id`.
- `comment`: A comment string describing how the time was spent.

Other keys are allowed but are currently ignored.

A complete data-set from a Redmine CSV export might look like this:

~~~~~~~ {.Scheme}
((id . 78893)
 (date (year . 2015) (month . 9) (day . 4))
 (person . "Joseph Donald Veloper")
 (activity . "Development")
 (project . "Foobar Oscilloscope Frontend V23R42")
 (ticket-id . 23666)
 (ticket-subject . "Find bandwith reducing reason")
 (comment . "Schematic and PCB review")
 (time . 3/2))
~~~~~~~

A file that is part of *time-sheet*'s data base contains *one* list of one
or more of these data sets. These kind of files can conveniently be loaded
into an application using the ‘`read-file`’ function from the `(time-sheet
utils file)` module.


# API

The library works on databases made up of lists of data sets as described
in the *DATA SETS* section above. The `(time-sheet csv-import)` module
provides a convinient way to turn CSV data sources into such expressions.

This section describes the public API of the modules that make up the
library. Any functionality not described herein are not part of the publib
API and therefore subject to change without further notice.


## *Module:* `(time-sheet calendar)`

Exported function: *generate-calender*

### *Function:* `(generate-calendar [KEYWORD/VALUE PAIR ...])`

This function's objective is to turn a list of data-sets into a week by
week calendar representation. Its API uses keyword/value pairs to pass
arguments into the function. Supported keywords:

- `#:time-sheet`: A list of data-sets representing the data the function
  will work on. (Default: Empty list)
- `#:span`: A list of days, the calendar shall be generated for. This does
  not have to be the same span that is covered in `#:time-sheet`.
  (Default: Empty List)
- `#:vacation`: A list of days considered vacation days. (Default: Empty
  List)
- `#:compansatory`: A list of days considered compensatory days. (Default:
  Empty List)
- `#:extra-leave`: A list of days considered extra leave days. (Default:
  Empty List)
- `#:hours-per-day`: An integer specifiying the required number of work
  hours per day. (Default: 8)

The return value of the function is a list of weeks of days of tasks, plus
some meta information per week derived from the data within that and the
preceding weeks. This value is suitable to be passed into rendering
functions described later on.


## *Module:* `(time-sheet csv-import)`

Exported functions:

- `csv->scm`
- `csv->s-exp`
- `read-timesheet`
- `timesheet->alist`
- `timesheet->sorted-alist`

### *Function:* `(csv->scm file-or-port [#:sort? BOOLEAN])`

`csv->scm` takes either a file-name or an open input port in
`file-or-port`, expects to be able to read CSV data from it and produces a
list of data sets read from the file as its return value.

If `#:sort?` is false, the order of the data sets in the returned list is
unspecified. The default it true, which means the list is sorted by the
data sets' `id` entries.

### *Function:* `(csv->s-exp file-or-port [#:sort? BOOLEAN])`

This function is like `csv->scm`, but instead of returning its list of
data sets, it pretty-prints it to stdout.

### *Function:* `(read-timesheet port)`

This is the low-level CSV reader function. It reads CSV lines from `port`
and returns the data contained therein as a list.

### *Function:* `(timesheet->alist data)`

This takes data as returned be `read-timesheet` and uses the data from the
first line of the CSV to produce association lists of the other lines'
data.

The function uses knowledge of the data exported from the Redmine project
tracker to bring the values listed into optimal shape.

### *Function:* `(timesheet->sorted-alist data)`

Thisis like `timesheet->alist` and in addition sorts the returned list of
data sets by their `id` entries.


## *Module:* `(time-sheet holidays)`

Exported functions:

- `local-holidays-for`
- `is-holiday?`

### *Function:* `(local-holidays-for year)`

Produce a list of holidays for a given year.

### *Function:* `(is-holiday? day)`

Takes a day — as in the sense of the (time-sheet utils date) module — and
determines if it is a holiday or not. It returns a boolean value
accordingly.


## *Module:* `(time-sheet inspect)`

Exported function: `ensure-user`

### *Function:* `(ensure-user user data)`

Scan `data` for its data sets' ‘person’ entries and make sure each and
every one matches the string `user`.

The function throws `missing-user-name` if a data set is missing the
‘person’ entry and it throws the `wrong-user` exception if the ‘person’
entry of a data set did not match `user`.


## *Module:* `(time-sheet merge)`

Exported function: `merge-time-sheets`

### *Function:* `(merge-time-sheets lst)`

Takes a list of lists of data sets and merges them into one list of data
sets.

The function throws `duplicate-id` if it finds that the `id` entries of
the data sets would not be unique.


## *Module:* `(time-sheet render)`

Exported function: `render-calendar`

### *Function:* `(render-calendar [KEYWORD/VALUE PAIR ...])`


## *Module:* `(time-sheet render latex)`

This is the LaTeX markup rendering module.

Exported functions:

- `begin-environment`
- `end-environment`
- `font`
- `paragraph`
- `pretty-alignment`
- `pretty-days`
- `pretty-items`
- `pretty-months`
- `pretty-styles`
- `pretty-summary`
- `latex-document`
- `line-style`
- `summary-for`
- `table-from`

The `pretty-*` functions can be used to customise the look of the output
of the `summary-for` and the `table-from` functions. The `(time-sheet
render)` module uses them to implement most of its features, including its
i18l framework.

The way they work is to return a value as required by one of the high-level
functions, by looking at at set of keyword/value arguments, each of which has a
sensible default value. For example, the `pretty-months` function produces a
value for use with the `#:months` arguments of the `table-from` function. So,
`(pretty-month)` returns all the complete default value for the `#:months`
argument.

This enables the user to change just a few of the values instead of every
single one: `(pretty-months #:july 'Halfwaythere)`

### *Function:* `(begin-environment env)`

Return a string that starts the LaTeX environment `env`.

### *Function:* `(end-environment env)`

Return a string that ends the LaTeX environment `env`.

### *Function:* `(font fnt text)`

Return the string `text` embedded in code that makes it being set in the
`fnt` font.

### *Function:* `(paragraph)`

Return a string that ends a LaTeX paragraph.

### *Function:* `(pretty-alignment [KEYWORD/VALUE PAIR ...])`

Generates a value suitable for the `#:alignment` keyword argument of the
`table-from` function.

Supported keywords: `#:date`, `#:day`, `#:type`, `#:daily-sum`, `#:weekly-sum`.

Please refer to the source code in `time-sheet/render/latex.scm` for details
about the default values for the keyword arguments.

### *Function:* `(pretty-days [KEYWORD/VALUE PAIR ...])`

Generates a value suitable for the `#:days` keyword argument of the
`table-from` function.

Supported keywords: `#:monday`, `#:tuesday`, `#:wednesday`, `#:thursday`,
`#:friday`, `#:saturday`, `#:sunday`.

Please refer to the source code in `time-sheet/render/latex.scm` for details
about the default values for the keyword arguments.

### *Function:* `(pretty-items [KEYWORD/VALUE PAIR ...])`

Generates a value suitable for the `#:pretty` keyword argument of the
`summary-for` and `table-from` functions.

Supported keywords: `#:balance`, `#:calendar-sum`, `#:compensatory`,
`#:compensatory-days`, `#:daily-sum`, `#:day`, `#:days`, `#:extra-leave`,
`#:extra-leave-days`, `#:holiday`, `#:holidays`, `#:hours`, `#:iso-week`,
`#:left`, `#:required`, `#:required-hours`, `#:summary`, `#:taken`, `#:type`,
`#:vacation`, `#:vacation-days`, `#:vacation-left`, `#:weekend-days`,
`#:weekend`, `#:weekly-sum`, `#:weeks`, `#:workday`, `#:workdays`,
`#:work-hours`, `#:year`.

Please refer to the source code in `time-sheet/render/latex.scm` for details
about the default values for the keyword arguments.

### *Function:* `(pretty-months [KEYWORD/VALUE PAIR ...])`

Generates a value suitable for the `#:months` keyword argument of the
`table-from` function.

Supported keywords: `#:january`, `#:febuary`, `#:march`, `#:april`, `#:may`,
`#:june`, `#:july`, `#:august`, `#:september`, `#:october`, `#:november`,
`#:december`.

Please refer to the source code in `time-sheet/render/latex.scm` for details
about the default values for the keyword arguments.

### *Function:* `(pretty-styles [KEYWORD/VALUE PAIR ...])`

Generates a value suitable for the `#:styles` keyword argument of the
`table-from` function.

Supported keywords: `#:header`, `#:days-a`, `#:days-b`, `#:tasks`, `#:summary`.

The values for these keywords need to be return values from the `line-style`
function.

Please refer to the source code in `time-sheet/render/latex.scm` for details
about the default values for the keyword arguments.

### *Function:* `(pretty-summary [KEYWORD/VALUE PAIR ...])`

Generates a value suitable for the `#:styles` keyword argument of the
`summary-for` function.

Supported keywords: `#:header`, `#:general`, `#:off-days`, `#:hours`,
`#:balance`.

The values for these keywords need to be return values from the `line-style`
function.

Please refer to the source code in `time-sheet/render/latex.scm` for details
about the default values for the keyword arguments.

### *Function:* `(latex-document [KEYWORD/VALUE PAIR ...])`

This function generates a latex document. It uses keyword/value pair arguments
to control its behaviour.

- `#:port`: Specifies the port the document is written to. (Default: `stdout`)
- `#:class`: The document class to use with the document. (Default: `scrreprt`)
- `#:content`: A thunk (lambda expression that takes no arguments) that
  produces everything within the `document` body of the latex markup the
  function generates. (Default: `(lambda () #f)`)
- `#:document-options`: A set of options to the document class. (See the source
  code about the default option list.)
- `#:geometry`: A set of options for the geometry of the generated document.
  (See the source code about the default option list.)

### *Function:* `(line-style [KEYWORD/VALUE PAIR ...])`

Return a text-property setter.

The return value is a pair of functions of one argument. That argument is
used as a string that the functions will wrap into LaTeX code that applies
a number of properties, which define the way the text is rendered.

The first function of the pair applies properties to an entire line in a
table, the second function applies properties to a piece of text in a
column of a line in a table.

line-style uses keyword arguments to determine the type of function it
returns, the default values of these keywords will cause the function to
return the identity function: (lambda (x) x).

- `#:colour`: this has to be either `gray`, `rgb`, `cmyk`, `named` or any
  colour recognised by the `color` LaTeX package.
- `#:hue`: In case `#:colour` is `named` this defines the colour to be
  used by name. If it is `rgb` this has to be a list of three values
  between 0 and 1; in case of `cmyk` a list of four values between 0
  and 1. In case of `gray` this value is ignored.
- `#:intensity`: With `#:colour` set to `named` of `gray` this defines the
  intensity of the colour.
- `#:text-colour`:  Like `#:colour` but for text.
- `#:text-hue`:  Like `#:hue` but for text.
- `#:text-intensity`:  Like `#:intensity` but for text.
- `#:size`: Defines the font size for the text. This may be an integer or
  a symbol that specifies one of LaTeX's default font sizes (like Huge,
  tiny or scriptsize).
- `#:size-unit`: The unit used for `#:size` (Default: `pt`)
- `#:line-space`: Defines the line-space for the text.
- `#:line-space-unit`: The unit used for `#:line-space` (Default: `em`)

### *Function:* `(summary-for calendar [KEYWORD/VALUE PAIR ...])`

This function produces a summary table of data contained within
`calendar`. In addition it uses keyword/value pairs as arguments:

- `#:port`: A port where the function will be writing the generated LaTeX
  markup to. (Default: `(current-output-port)`)
- `#:pretty`: See `pretty-items` for details. (Default: The return value of
  `pretty-items`)
- `#:styles`: See `pretty-styles` for details. (Default: The return value
  of `pretty-styles`)
- `#:vacation-days`: If defined, the number of vacation days available for
  this calendar. (Default: `#f`)
- `#:compensatory-days`: If defined, the number of vacation days available for
  this calendar. (Default: `#f`)
- `#:extra-leave-days`: If defined, the number of vacation days available for
  this calendar. (Default: `#f`)

The function will write its output to `#:port`.

### *Function:* `(table-from calendar [KEYWORD/VALUE PAIR ...])`

This is the main generator (along-side summary-for, which serves a
different purpose). It uses `calendar` as its input data and takes a
number of keyword/value pairs in addition to that:

- `#:port`: A port where the function will be writing the generated LaTeX
  markup to. (Default: `(current-output-port)`)
- `#:comment-length`: When this is an integer it specifies the number of
  characters the function will render fron the ‘comment’ data of data
  sets; if that piece of data is used at all. (Default: `#f`)
- `#:subject-length`: When this is an integer it specifies the number of
  characters the function will render fron the ‘subject’ data of data
  sets; if that piece of data is used at all.  (Default: `#f`)
- `#:date-style`: Specifies the way dates are rendered; possible values:
  `day-month`, `english`. (Default: `english`)
- `#:alternating-shade`: When rendering days in a table use alternating
  shades line after line. (Default: `#f`)
- `#:weekly-structure`: Specify which information to include in the
  generated table. Possible members: `header`, `days`, `summary`, `tasks`,
  `comments`. (Default: `(header days summary)`)
- `#:days`: See `pretty-days` for details. (Default: The return value of
  `pretty-days`)
- `#:months`: See `pretty-months` for details. (Default: The return value of
  `pretty-months`)
- `#:pretty`: See `pretty-items` for details. (Default: The return value of
  `pretty-items`)
- `#:styles`: See `pretty-styles` for details. (Default: The return value
  of `pretty-styles`)
- `#:alignment`: See `pretty-alignment` for details. (Default: The return
  value of `pretty-alignment`)
- `#:vacation-days`: (Default: `#f`)

The function will generate a latex table from `calendar` and output it to
`#:port`.


## *Module:* `(time-sheet script)`

The `(time-sheet script)` module allows multiple scripts using the library to
adhere to the same calling conventions. Supported arguments:

- `--help`, `-h`: Print a help message.
- `--mode MODE`, `-m MODE`: Choose a generation mode: `compact` (default),
  `detailed`, `complete`.
- `--lang LANG`, `-l LANG`: Choose a language to use with the generated
  document: `english` (default), `german`
- `--type TYPE`, `-t TYPE`: Specify a type of document that will be generated:
  `latex` (default), `pp` (using Guile's pretty-printer).

Exported function: `script-options`


### *Function:* `(script-options cmdline)`

This function takes a list that represents a script calling command line (the
`command-line` function's return value will do nicely) and returns an
association list that maps values from the command line to keys that may be
used to configure the `render-calendar` function from the `(time-sheet render)`
module:

- `detailed?`: Based on `--mode`; suitable to configure `#:detailed?`.
- `language`: Based on `--lang`; suitable to configure `#:language`.
- `type`: Based on `--type`; suitable to configure `#:type`.


## *Module:* `(time-sheet utils date)`

This module deals with questions one might have about dates. A date in
this module's sense is a list of three items: `(year month day)`

The module supports conversion to and from an annotated date
representation: `((year . 1234) (month . 12) (day . 3))`

The annotated version is used in the time-sheet's data sets.

Exported functions:

- `is-leap-year?`
- `is-week-day?`
- `is-week-end?`
- `alist->date`
- `date->alist`
- `date->day`
- `date->week`
- `date+`
- `date-`
- `date-span`
- `day-of-year`
- `date+woy->year`
- `easter-date`

### *Function:* `(is-leap-year? year)`

Determine whether or not `year` is a leap-year.

### *Function:* `(is-week-day? date)`

Determine whether or not `date` is a week-day or not. This is the opposite
of `is-week-end?`.

### *Function:* `(is-week-end? date)`

Determine whether or not `date` falls on a week-end or not. This is the
opposite of `is-week-day?`.

### *Function:* `(alist->date alist)`

Convert the annotated representation of a date into a bare one.

### *Function:* `(date->alist date)`

Convert the bare representation of a date into an annotated one.

### *Function:* `(date->day date)`

Return a symbol describing the day of the week for `date` (for example:
`sunday`, `tuesday` etc.).

### *Function:* `(date->week date)`

Return the ISO week of year number for date.

### *Function:* `(date+ date n)`

Add `n` days to `date` and return the resulting date.

### *Function:* `(date- date n)`

Subtract `n` days from `date` and return the resulting date.

### *Function:* `(date-span start stop)`

Return a list of all dates between and including `start` and `stop`.

### *Function:* `(day-of-year date)`

Return the day of the year for `date`.

### *Function:* `(date+woy->year date woy)`

Take a `date` and a week of year value (`woy`) and produce a year value
that fits with `woy` rather than the year contained within `date`.

### *Function:* `(easter-date year)`

Return the date of Easter Sunday for `year`.


## *Module:* `(time-sheet utils file)`

Exported functions:

- `match-files`
- `read-file`

### *Function:* `(match-files [KEYWORD/VALUE PAIR ...])`

Produce a list of file names matching a regular expression pattern within
one or more directories. The function uses keyword/value pairs to pass its
arguments in:

- `#:regexp`: The regular expression to match against available file
  names. The function uses exteded regular expressions. (Default: `"."` —
  which matches every file)
- `#:directory`: The directory to scan for files. (Default: `"."`)
- `#:directories`: If non-empty, this takes precedence over `#:directory`.
  It allows the function to match files in multiple directories. (Default:
  Empty list)

### *Function:* `(read-file file)`

Uses Guile's Scheme `read` function on `file` and returns the result.


## *Module:* `(time-sheet vacation)`

Exported functions:

- `make-vacation-predicate`
- `vacation`

### *Function:* `(make-vacation-predicate lst)`

Takes a list of vacation days (usually generated using the `vacation`
function of this module) and returns a function that takes one argument,
which that function then checks if it is a member of `lst`.

### *Function:* `(vacation [VACATION ENTRIES ...])`

This produces a list of dates specified by `VACATION ENTRIES ...` that are
neither weekend days nor holidays. `VACATION ENTRIES ...` works like this:
It is a list of either dates or three expressions `#:span start stop` that
produces lists of dates instead of having to specify each and every date
by hand.

Example:

~~~~~~~ {.Scheme}
(vacation #:span '(2014 12 19) '(2014 12 24)
          #:span '(2014 12 25) '(2015 01 02)
          '(2015 05 15)
          #:span '(2015 08 10) '(2015 08 12))
~~~~~~~


# SEE ALSO

The *Guile Reference Manual*; the *Redmine User's Guide*.


# AUTHOR

Frank Terbeck `‹ft@bewatermyfriend.org›`


# COPYRIGHT AND LICENCE

Copyright (c) 2015 Frank Terbeck `‹ft@bewatermyfriend.org›`, All rights
reserved.

This library is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

This library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
